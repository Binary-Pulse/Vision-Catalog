// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider     = "postgres"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod" // (default) the directory where generated zod schemas will be saved
  relationModel         = true // (default) Create and export both plain and related models.
  modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)
  modelSuffix           = "ZodSchema" // (default) Suffix to apply to your prisma models when naming Zod schemas
  useDecimalJs          = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.Text
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  products Product[]
  address  Address[]

  @@map(name: "users")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model Image {
  id        String   @id @default(uuid())
  productId String   @unique
  url       String[]
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([id])
}

model Address {
  id        String  @id @default(uuid())
  userId    String
  street    String?
  city      String?
  state     String?
  zip       String?
  country   String?
  isDefault Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Price {
  id                 String   @id @default(uuid())
  productId          String   @unique
  regularPrice       Float?
  discountedPrice    Float?
  discountPercentage Float?
  currency           CURRENCY
  tax                Float?
  shippingCost       Float?
  handlingFee        Float?
  ppuCount           Float?
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([id])
}

enum CURRENCY {
  USD
  INR
}

model Category {
  id      String    @id @default(uuid())
  name    String
  product Product[]
}

model Product {
  id                           String         @id @default(uuid())
  userId                       String         @unique
  brandId                      String         @unique
  variantId                    String?
  variant                      Product?       @relation("ProductVariant", fields: [variantId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  variants                     Product[]      @relation("ProductVariant")
  UPC                          String?
  EAN                          String?
  ISBN                         String?
  productName                  String
  brand                        Brand?         @relation(fields: [brandId], references: [id])
  category                     Category[]
  images                       Image?
  description                  String?
  bulletPoints                 String[]
  legalDisclaimer              String?
  createdAt                    DateTime       @default(now()) @map(name: "created_at")
  updatedAt                    DateTime       @default(now()) @map(name: "updated_at")
  keywords                     String?
  targetAudience               String?
  searchTerms                  String[]
  moreDetails                  MoreDetails?
  modelNumber                  String?
  catalogNumber                String?
  color                        String?
  size                         String?
  eachUnitCount                Int?
  numberOfItems                Int?
  status                       ProductStatus? @default(Private)
  isDiscontinuedByManufacturer Boolean?
  usage                        String?
  safetyWarning                String?
  price                        Price?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([variantId])
}

enum ProductStatus {
  Published
  Private
}

model MoreDetails {
  id                    String    @id @default(uuid())
  productId             String    @unique
  launchDate            DateTime?
  releaseDate           DateTime?
  targetGender          String?
  targetAudienceDetails String?
  usage                 String[]
  displayWeight         String?
  packageWeight         String?
  shippingWeight        String?
  containsLiquid        Boolean?
  isFragile             Boolean?
  itemForm              String?
  itemType              String?
  materialType          String?
  hairType              String?
  skinType              String?
  fabricType            String?

  dimensions Dimension?
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([id])
}

model Brand {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Dimension {
  id            String @id @default(uuid())
  moreDetailsId String @unique
  productLength Float?
  productWidth  Float?
  productHeight Float?
  packageLength Float?
  packageWidth  Float?
  packageHeight Float?
  displayLenght Float?
  displayWidth  Float?

  parameter String?
  package   MoreDetails @relation(fields: [moreDetailsId], references: [id], onDelete: Cascade)
}
